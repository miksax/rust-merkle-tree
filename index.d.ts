/* tslint:disable */
/* eslint-disable */

/* auto-generated by NAPI-RS */

export declare function init(): void
export type MerkleTreeOptionsJs = MerkleTreeOptions
export declare class MerkleTreeOptions {
  ordered: boolean
}
export type MerkleTreeLeafJs = MerkleTreeLeaf
export declare class MerkleTreeLeaf {
  data: Array<number>
  hash: Array<number>
}
export type MerkleTreeJs = MerkleTree
export declare class MerkleTree {
  static hash(data: Uint8Array): Uint8Array
  constructor()
  static newWithOptions(options: MerkleTreeOptions): MerkleTree
  static fromLeaves(leaves: Array<Uint8Array>): MerkleTree
  setOptions(options: MerkleTreeOptions): void
  hashes(): Array<Uint8Array>
  values(): Array<MerkleTreeLeaf>
  insert(leaf: Uint8Array): Uint8Array
  append(leaves: Array<Uint8Array>): void
  /**
  * Generate internal tree. Sort the leaves, if it is needed by options
  */
  generateTree(): void
  root(): Uint8Array | null
  rootHex(): string | null
  /**
  * Create proof from leaves indices
  */
  proof(leafIndices: Uint32Array): MerkleProofJs
  commit(): void
  rollback(): void
  leafIndexLookup(data: Uint8Array): bigint | null
  getLeafIndex(hash: Uint8Array): number | null
}
export type MerkleProofJs = MerkleProof
export declare class MerkleProof {
  constructor(proofHashes: Array<Uint8Array>)
  static newUnordered(proofHashes: Array<Uint8Array>): MerkleProof
  static fromBytesOrdered(bytes: Uint8Array): MerkleProof
  static fromBytesUnordered(bytes: Uint8Array): MerkleProof
  static verifyOrdered(root: Uint8Array, hash: Uint8Array, leafHashes: Array<Uint8Array>): boolean
  static verifyUnordered(root: Uint8Array, leafIndices: Uint32Array, leafHashes: Array<Uint8Array>, proofHashes: Array<Uint8Array>, totalLeaves: number): boolean
  root(leafIndices: Uint32Array, leafHashes: Array<Uint8Array>, totalLeavesCount: number): Uint8Array
  rootHex(leafIndices: Uint32Array, leafHashes: Array<Uint8Array>, totalLeavesCount: number): string
  proofHashes(): Array<Uint8Array>
  proofHashesHex(): Array<string>
  toBytes(): Uint8Array
}
